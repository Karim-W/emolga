// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/UserState/hearing": {
            "get": {
                "description": "api to get user state map for n hearing Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserState"
                ],
                "summary": "Get User State Map for N hearings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transactionid",
                        "name": "Transactionid",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session Id",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/definitions/models.RedisUserEntry"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/UserState/session/{sessionId}": {
            "get": {
                "description": "api to get user state map for session users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserState"
                ],
                "summary": "Get User State Map for session Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transactionid",
                        "name": "Transactionid",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Session Id",
                        "name": "sessionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/models.RedisUserEntry"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/actions": {
            "post": {
                "description": "Api to publish an admin action",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Publish an admin action",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transactionid",
                        "name": "Transactionid",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "command",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/commands.AdminCommand"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/presence": {
            "post": {
                "description": "Api to log a presence",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "presence"
                ],
                "summary": "Log a presence",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transactionid",
                        "name": "Transactionid",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "presence Update",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PresenceUpdate"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "commands.AdminCommand": {
            "type": "object",
            "properties": {
                "audience": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "audienceType": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "models.NotifiedEntity": {
            "type": "object",
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityType": {
                    "type": "string"
                }
            }
        },
        "models.PresenceUpdate": {
            "type": "object",
            "properties": {
                "notificationType": {
                    "type": "string"
                },
                "notifiedEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.NotifiedEntity"
                    }
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "models.RedisUserEntry": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "hearings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "serverInstance": {
                    "type": "string"
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "socketId": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userEmail": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
